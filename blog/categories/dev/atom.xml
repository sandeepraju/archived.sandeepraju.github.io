<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: dev | Sandeep Raju]]></title>
  <link href="http://sandeepraju.in/blog/categories/dev/atom.xml" rel="self"/>
  <link href="http://sandeepraju.in/"/>
  <updated>2014-03-28T21:08:51+00:00</updated>
  <id>http://sandeepraju.in/</id>
  <author>
    <name><![CDATA[Sandeep Raju]]></name>
    <email><![CDATA[me@sandeepraju.in]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My Experiments With Postgres]]></title>
    <link href="http://sandeepraju.in/blog/2014/03/28/my-experiments-with-postgres/"/>
    <updated>2014-03-28T18:29:00+00:00</updated>
    <id>http://sandeepraju.in/blog/2014/03/28/my-experiments-with-postgres</id>
    <content type="html"><![CDATA[<p>Being a Postgres user from the past couple of months, I have learnt some tricks, configs, queries that have helped me a lot. These not only save time but also makes the interaction with Postgres more pleasurable. I&rsquo;ll share some of my learning here&hellip;</p>

<!-- more -->


<h2>Writing long queries in psql like a pro</h2>

<p>I am sure everyone agrees that writing queries (especially some long ones) in psql console is a pain in the ass. I used to generally compose those queries in a text editor of my choice and copy-paste them into the console&hellip; until I found out about the <code>\e</code> option! When you first invoke it, you will be prompted to choose the editor of your choice. Once this is done, you can invoke <code>\e</code> whenever you have to write queries and then save &amp; close the editor to run them!</p>

<pre><code>postgres=# \e

Select an editor.  To change later, run 'select-editor'.
  1. /bin/ed
  2. /bin/nano        &lt;---- easiest
  3. /usr/bin/emacs24
  4. /usr/bin/vim.basic
  5. /usr/bin/vim.nox
  6. /usr/bin/vim.tiny

Choose 1-6 [2]: 3
</code></pre>

<p>Amazing isn&rsquo;t it? :D</p>

<h2>List all active connections to the database</h2>

<p>Sometimes you&rsquo;d want to see what all clients are accessing the database. In addition, you might want to know what query the client is running and other related details. This information can be obtained from the <code>pg_stat_activity</code>.</p>

<p>This is how a select query on <code>pg_stat_activity</code> looks like.</p>

<pre><code>postgres=# select * from pg_stat_activity;
-[ RECORD 1 ]----+--------------------------------
datid            | 11951
datname          | postgres
procpid          | 9643
usesysid         | 10
usename          | postgres
application_name | psql
client_addr      |
client_hostname  |
client_port      | -1
backend_start    | 2014-03-28 20:10:36.235241+00
xact_start       | 2014-03-28 20:10:52.49035+00
query_start      | 2014-03-28 20:10:52.49035+00
waiting          | f
current_query    | select * from pg_stat_activity;
</code></pre>

<p>As you can see, this table gives a lot of insights into the activity of the database.</p>

<h2>Dumping data &amp; Loading it back</h2>

<p>This is a general requirement where you might want to take a dump of a table or an entire database for various purposes. This is simple in Postgres.</p>

<p>```bash</p>

<h1>dump the entire database</h1>

<p>$ pg_dump <database_name> > /path/to/output/file</p>

<h1>gzip it if the table / database is too big</h1>

<p>$ pg_dump <database_name> | gzip -c > /path/to/output/file.gz</p>

<h1>load the database</h1>

<p>$ gunzip /path/to/output/file.gz  # incase of gzip file
$ psql -d <database_name> -f /path/to/output/file
```</p>

<h2>Dumping the output of a query as CSV or SQL</h2>

<p>This trick can be handy in a couple of places where we might need to dump only selective rows for further processing.</p>

<p>```sql
&ndash; copy to sql file
COPY (SELECT * FROM table_name_here WHERE some_field>10) TO &lsquo;/path/to/output/file.sql&rsquo;;</p>

<p>&ndash; to csv
COPY (SELECT * FROM table_name_here WHERE some_field>10) TO &lsquo;/path/to/output/file.sql&rsquo; WITH CSV;</p>

<p>&ndash; load the data to the table from the file
COPY table_name_here FROM &lsquo;/path/to/output/file.sql&rsquo;;</p>

<p>&ndash; from csv
COPY table_name_here FROM &lsquo;/path/to/output/file.sql&rsquo; WITH CSV;
```</p>

<h2>Finding size of database / table</h2>

<p><a href="http://surveillance.mcgill.ca/wiki/Postgres%20Tricks">Surveillance Lab Wiki</a> lists three very useful commands that I have used several times over the past few months.</p>

<p>```sql
&ndash; all database sizes
select datname, pg_size_pretty(pg_database_size(datname)) as size from pg_database order by pg_database_size(datname) desc;</p>

<p>&ndash; single database size
SELECT pg_size_pretty(pg_database_size(&lsquo;database_name&rsquo;));</p>

<p>&ndash; single table size
SELECT  table_name,pg_size_pretty(pg_relation_size(table_schema || &lsquo;.&rsquo; || table_name)::bigint) as size
from information_schema.tables
where table_name = &lsquo;all_join_hosp&rsquo;;
```</p>

<h2>Explain &amp; Analyze SQL queries</h2>

<p>It is a common requirement for everyone to know how the database runs a particular query so that it can be optimized. One command that helps us lot in this regard is <code>EXPLAIN ANALYZE</code>.</p>

<pre><code>postgres=# EXPLAIN ANALYZE select * from pg_shadow;
-[ RECORD 1 ]-------------------------------------------------------------------------------------------------------------------------------------------------------------------
QUERY PLAN | Nested Loop Left Join  (cost=0.00..9.30 rows=1 width=144) (actual time=0.017..0.018 rows=1 loops=1)
-[ RECORD 2 ]-------------------------------------------------------------------------------------------------------------------------------------------------------------------
QUERY PLAN |   -&gt;  Seq Scan on pg_authid  (cost=0.00..1.01 rows=1 width=112) (actual time=0.007..0.007 rows=1 loops=1)
-[ RECORD 3 ]-------------------------------------------------------------------------------------------------------------------------------------------------------------------
QUERY PLAN |         Filter: rolcanlogin
-[ RECORD 4 ]-------------------------------------------------------------------------------------------------------------------------------------------------------------------
QUERY PLAN |   -&gt;  Index Scan using pg_db_role_setting_databaseid_rol_index on pg_db_role_setting s  (cost=0.00..8.27 rows=1 width=36) (actual time=0.005..0.005 rows=0 loops=1)
-[ RECORD 5 ]-------------------------------------------------------------------------------------------------------------------------------------------------------------------
QUERY PLAN |         Index Cond: ((setdatabase = 0::oid) AND (pg_authid.oid = setrole))
-[ RECORD 6 ]-------------------------------------------------------------------------------------------------------------------------------------------------------------------
QUERY PLAN | Total runtime: 0.054 ms
</code></pre>

<p>This command dissects the query into parts and shows us what Postgres does under the hood.</p>

<h2>Misc</h2>

<p>Some other posts that I found useful are,</p>

<ul>
<li><a href="http://www.craigkerstiens.com/2013/11/18/best-postgres-feature-youre-not-using/">WITH clause</a>.</li>
<li><a href="http://robots.thoughtbot.com/improving-the-command-line-postgres-experience">Changing psql prompts</a>.</li>
<li><a href="http://stackoverflow.com/questions/761327/hidden-features-of-postgresql">Hidden features thread on Stack Overflow</a>.</li>
</ul>


<h3>References</h3>

<ol>
<li><a href="http://www.craigkerstiens.com/2013/02/13/How-I-Work-With-Postgres/">http://www.craigkerstiens.com/2013/02/13/How-I-Work-With-Postgres/</a></li>
<li><a href="http://stackoverflow.com/questions/464623/how-can-you-get-the-active-users-connected-to-a-postgresql-database-via-sql">http://stackoverflow.com/questions/464623/how-can-you-get-the-active-users-connected-to-a-postgresql-database-via-sql</a></li>
<li><a href="http://stackoverflow.com/questions/1745105/postgres-dump-of-only-parts-of-tables-for-a-dev-snapshot">http://stackoverflow.com/questions/1745105/postgres-dump-of-only-parts-of-tables-for-a-dev-snapshot</a></li>
<li><a href="http://stackoverflow.com/questions/1517635/save-postgres-sql-output-to-csv-file">http://stackoverflow.com/questions/1517635/save-postgres-sql-output-to-csv-file</a></li>
<li><a href="http://surveillance.mcgill.ca/wiki/Postgres%20Tricks">http://surveillance.mcgill.ca/wiki/Postgres%20Tricks</a></li>
<li><a href="http://instagram-engineering.tumblr.com/post/40781627982/handling-growth-with-postgres-5-tips-from-instagram">http://instagram-engineering.tumblr.com/post/40781627982/handling-growth-with-postgres-5-tips-from-instagram</a></li>
</ol>


<p>Happy Coding :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Emacs]]></title>
    <link href="http://sandeepraju.in/blog/2014/03/27/hello-emacs/"/>
    <updated>2014-03-27T17:41:00+00:00</updated>
    <id>http://sandeepraju.in/blog/2014/03/27/hello-emacs</id>
    <content type="html"><![CDATA[<p>Since the day I found <a href="http://www.sublimetext.com/">Sublime Text</a>, it has been my favorite and default editor for all programming and general writing. The simplicity and the elegance of Sublime is what makes me love it. But sometimes, it is not just enough to know how to use a graphical editor. You need to master a command line based editor as well. I realised this when I moved to Mac at work.</p>

<!-- more -->


<p>I use Mac Book Air for all development at work. The only problem I find with using Mac for development is that, my local development setup and the production setup are way too different. As all the code I write finally run on Linux in production, there might be cases which I might overlook if I run my code on OSx while developing. Considering this fact, I have an <a href="http://www.debian.org/">Debian</a> server <a href="https://www.virtualbox.org/">VirtualBox</a> running on my Mac which I use to write code and run tests. This requires me to ssh into my VirtualBox and code on the console. This is when I realised how important mastering a console based editor is. Though I was familiar with <a href="http://www.vim.org/">ViM</a>, I was not at the same pace when I used to use Sublime. Eventually I got fed up and started mounting the VirtualBox&rsquo;s file system over ssh into my Mac and started using Sublime.</p>

<p>All this worked fine for a few months until I found myself in a situation where I had to code on a remote server over ssh for a particular project. Mounting a remote filesystem in this case turned out to be a big disaster due to huge delays in synchronizing files over the network. At this point it was clear that I had to use a console based editor. My first choice was ViM as I was already familiar with it, but I found myself lost very soon with all the complicated shortcuts &amp; modes it had. I am not blaming / judging it. I somewhat felt that ViM was simply not my cup of tea.</p>

<p>I felt I was out of choices. I looked around&hellip; Ah! One of my <a href="https://twitter.com/gurteshwarsingh">peer</a> was using <a href="http://www.gnu.org/software/emacs/">Emacs</a>. I had heard of this editor but never had the time or courage to actually try it out. I saw him seamlessly code in Emacs. It looked fast. It looked like something that I wanted. I installed it.</p>

<p>Spending some time with Emacs, I realised that Emacs is more intuitive. It had this amazing capability that let us configure every single minute possibility to our liking. The key bindings made sense. I started to fiddle around with it and soon ended up making my Emacs look like Sublime ;) This is how my Emacs init.el looked like at the end of it&hellip;</p>

<p>```cl
;; emacs24 package system
;; from: <a href="http://ergoemacs.org/emacs/emacs_package_system.html">http://ergoemacs.org/emacs/emacs_package_system.html</a>
(when (>= emacs-major-version 24)
  (require &lsquo;package)
  (package-initialize)
  (add-to-list 'package-archives &rsquo;(&ldquo;melpa&rdquo; . &ldquo;<a href="http://melpa.milkbox.net/packages/">http://melpa.milkbox.net/packages/</a>&rdquo;) t)
)</p>

<p>;; load theme
(load-theme &lsquo;monokai t)</p>

<p>;; load jedi - python autocomplete
;; <a href="https://github.com/tkf/emacs-jedi/issues/37">https://github.com/tkf/emacs-jedi/issues/37</a>
(add-hook &lsquo;python-mode-hook 'jedi:setup)
(setq jedi:complete-on-dot t)
(setq jedi:get-in-function-call-delay 300)</p>

<p>;; don&rsquo;t show splash screen at startup
(setq inhibit-startup-message t)</p>

<p>;; don&rsquo;t show any message in <em>scratch</em> buffer
(setq initial-scratch-message &ldquo;&rdquo;)</p>

<p>;; autopair braces, paranthesis
(autopair-global-mode t)</p>

<p>;; line number config - <a href="http://stackoverflow.com/a/8470136/1044366">http://stackoverflow.com/a/8470136/1044366</a>
(global-linum-mode t)
(custom-set-variables &lsquo;(linum-format 'dynamic))
(defadvice linum-update-window (around linum-dynamic activate)
  (let* ((w (length (number-to-string
             (count-lines (point-min) (point-max)))))
     (linum-format (concat &ldquo;%&rdquo; (number-to-string w) &ldquo;d &rdquo;)))
    ad-do-it))</p>

<p>;; show column number
(setq column-number-mode t)</p>

<p>;; use spaces only
(setq indent-tabs-mode nil)</p>

<p>;; standard indent size
(setq standard-indent 4)</p>

<p>;; enable mouse support
(unless window-system
  (require &lsquo;mouse)
  (xterm-mouse-mode t)
  (global-set-key [mouse-4] &rsquo;(lambda ()
                   (interactive)
                   (scroll-down 1)))
  (global-set-key [mouse-5] &lsquo;(lambda ()
                   (interactive)
                   (scroll-up 1)))
  (defun track-mouse (e))
  (setq mouse-sel-mode t)
  )</p>

<p>;; don&rsquo;t litter
(setq make-backup-files nil)</p>

<p>;; remove trailing whitespace before save
(add-hook &lsquo;before-save-hook 'delete-trailing-whitespace)
```</p>

<p>Most of the lisp code is copied from all over the internet. I think eventually I&rsquo;ll learn <a href="">Emacs Lisp</a> and will be in a better position to understand completely as to what is happening in these configs. I also installed some plugins like jedi (for autocompletion) and autopair.</p>

<p>This is how my Emacs looks finally.</p>

<p>{% img /images/2014/03/27/emacs.png Screenshot Of My Personalized Emacs %}</p>

<p>I hope I&rsquo;ll soon master Emacs and make it my primary editor. Waiting to learn Emacs over the coming months!</p>

<p>Happy coding :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Fabric To Run Commands Remotely]]></title>
    <link href="http://sandeepraju.in/blog/2013/09/06/using-fabric-to-run-commands-remotely/"/>
    <updated>2013-09-06T05:53:00+00:00</updated>
    <id>http://sandeepraju.in/blog/2013/09/06/using-fabric-to-run-commands-remotely</id>
    <content type="html"><![CDATA[<p>At times, you might have to do some <em>ninjaing</em> around to run commands on mutiple servers. If you are like me, a semi literate in <a href="http://en.wikipedia.org/wiki/Shell_script">shell scripting</a>, you&rsquo;d google for the shell / <a href="http://en.wikipedia.org/wiki/AWK">awk</a> syntax and waste hours writing scripts to do this. But then, wasting hours to run a simple script on multiple servers is pointless. What if I can do this with Python? All problems solved :) That is where <a href="http://docs.fabfile.org/en/1.7/">Fabric</a> comes into picture!</p>

<!-- more -->


<blockquote><p>Fabric is a Python library and command-line tool for streamlining the use of SSH for application deployment or systems administration tasks.</p></blockquote>

<p>Installing fabric is easy. Just run the following commands to install fabric via <a href="https://pypi.python.org/pypi/pip">pip</a>.</p>

<p><code>bash
apt-get install gcc python-dev python-setuptools
pip install fabric
</code></p>

<p>This enables the <em>fab</em> command which will be used to run fabric scripts. Fabric script file is named <code>fabfile.py</code> by convention. So, let us create a small script to check how many users logged into each server.</p>

<p>```python</p>

<h1>filename: fabfile.py</h1>

<p>from fabric.api import env, run</p>

<p>env.hosts = [&lsquo;192.168.0.9&rsquo;, &lsquo;192.168.0.10&rsquo;, &lsquo;192.168.0.11&rsquo;]</p>

<p>def logged_in_users():
    run(&lsquo;who&rsquo;)
```</p>

<p>Now, when we run this function using fabric, an ssh connection is made into each of the servers listed and the function is run. We can run this using the following command,</p>

<p><code>bash
fab logged_in_users
</code></p>

<p>Note that due to the naming convention we followed, we need not even give the filename to the fab command. It will automatically look for the file named <code>fabfile.py</code>    and runs the function you have specified.</p>

<p>Here is what you get as output, the logged in users of each system,</p>

<pre><code>[192.168.0.9] Executing task 'logged_in_users'
[192.168.0.9] run: who
[192.168.0.9] out: sandeep  tty7         2013-09-05 15:24 (:0)
[192.168.0.9] out: alex     pts/0        2013-09-05 22:38 (:0)
[192.168.0.9] out: root     pts/2        2013-09-06 03:31 (192.168.0.9)
[192.168.0.9] out: 

[192.168.0.10] Executing task 'logged_in_users'
[192.168.0.10] run: who
[192.168.0.10] out: sandeep  tty7         2013-09-05 15:22 (:0)
[192.168.0.10] out: 

[192.168.0.11] Executing task 'logged_in_users'
[192.168.0.11] run: who
[192.168.0.11] out: sandeep  tty7         2013-09-05 15:21 (:0)
[192.168.0.11] out: 


Done.
Disconnecting from 192.168.0.11... done.
Disconnecting from 192.168.0.10... done.
Disconnecting from 192.168.0.09... done.
</code></pre>

<p>If you just ran this command, you&rsquo;d realise that the process happens in a sequence. That is, the command is run on each server one after another. To run this command parallely on the listed server, pass the -P flag to the command. So, the same command runs the function in parallelly on each server,</p>

<p><code>bash
fab -P logged_in_users
</code></p>

<p>Now, with fabric, running scripts on multiple servers is simple and quick! :)</p>

<p><strong>SOURCE:</strong> This post is based on <a href="https://gist.github.com/DavidWittman/1886632">A Brief Introduction to Fabric</a> which I stumbled upon when I was looking for getting started with Fabric quickly. Check it out. Its pretty cool :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django Dumpdata To Dump Selective Rows]]></title>
    <link href="http://sandeepraju.in/blog/2013/08/22/django-dumpdata-to-dump-selective-rows/"/>
    <updated>2013-08-22T08:14:00+00:00</updated>
    <id>http://sandeepraju.in/blog/2013/08/22/django-dumpdata-to-dump-selective-rows</id>
    <content type="html"><![CDATA[<p>Thanks to my <a href="https://twitter.com/GurteshwarSingh">telephony geek friend</a> for letting me know this simple but highly useful method to selectively dump <a href="https://www.djangoproject.com">django</a> models data into a django standard <em>model-dump</em> format. Here is a simple snippet which shows how to selectively dump only the required rows and not the entire model.</p>

<!-- more -->


<p>```python
from django.core import serializers</p>

<h1>Generate a queryset depending on whatever you need</h1>

<p>query_set = YourModel.objects.all()[:2000]  # selecting only first 2k rows</p>

<h1>Serialize the queryset into JSON with indentation of 4 spaces</h1>

<p>json_data = serializers.serialize(&ldquo;json&rdquo;, query_set, indent=4)</p>

<h1>Dump the json data into a file</h1>

<p>output_file = open(&lsquo;YourModel.json&rsquo;, &lsquo;w&rsquo;)
output_file.write(json_data)
output_file.close()</p>

<p>```</p>

<p>Works like a charm!</p>

<p>Happy coding :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Terminal Sharing Using Tmux]]></title>
    <link href="http://sandeepraju.in/blog/2013/08/17/terminal-sharing-using-tmux/"/>
    <updated>2013-08-17T22:10:00+00:00</updated>
    <id>http://sandeepraju.in/blog/2013/08/17/terminal-sharing-using-tmux</id>
    <content type="html"><![CDATA[<p>Recently, I helped my friend setup <a href="http://vijaym.in">his octopress blog</a>. The problem was that, we were miles apart and interacting via chat turned out to be hard. What we needed was a shared terminal where both of us could see the commands entered by either of us. A quick google search showed me that this was possible easily using <a href="http://tmux.sourceforge.net/">tmux</a>.</p>

<!-- more -->


<p>Simply said, tmux is a <em>terminal multiplexer</em>. What that means? Here is what the <a href="http://tmux.sourceforge.net/">official site</a> says&hellip;</p>

<blockquote><p>It lets you switch easily between several programs in one terminal, detach them (they keep running in the background) and reattach them to a different terminal. And do a lot more.</p></blockquote>

<p>Basically, its a better alternative to <a href="http://www.gnu.org/software/screen/">screen</a> which I was already using for a while.</p>

<p>This is what I did to share <em>his</em> terminal with <em>me</em>,</p>

<ul>
<li>We installed tmux using the command <code>sudo apt-get install tmux</code> on both the systems.</li>
<li>Asked him to run the following commands on the terminal that <em>he</em> wants to share with <em>me</em>.</li>
</ul>


<p>```bash</p>

<h1>specify the name of the tmux socket with -S when creating it</h1>

<p>tmux -S /tmp/share</p>

<h1>chmod to allow me to access his socket</h1>

<p>chmod 777 /tmp/share
```</p>

<ul>
<li>Then, I logged into <em>his</em> system via SSH and ran the following command to access the terminal <em>he</em> is sharing with <em>me</em>.</li>
</ul>


<p>```bash</p>

<h1>now to connect to his shared terminal</h1>

<p>tmux -S /tmp/share attach
```</p>

<p>As simple as that!</p>

<p>Happy coding :)</p>
]]></content>
  </entry>
  
</feed>
