<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | Sandeep Raju]]></title>
  <link href="http://sandeepraju.in/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://sandeepraju.in/"/>
  <updated>2013-09-06T06:11:52+05:30</updated>
  <id>http://sandeepraju.in/</id>
  <author>
    <name><![CDATA[Sandeep Raju]]></name>
    <email><![CDATA[me@sandeepraju.in]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Fabric To Run Commands Remotely]]></title>
    <link href="http://sandeepraju.in/blog/2013/09/06/using-fabric-to-run-commands-remotely/"/>
    <updated>2013-09-06T05:53:00+05:30</updated>
    <id>http://sandeepraju.in/blog/2013/09/06/using-fabric-to-run-commands-remotely</id>
    <content type="html"><![CDATA[<p>At times, you might have to do some <em>ninjaing</em> around to run commands on mutiple servers. If you are like me, a semi literate in <a href="http://en.wikipedia.org/wiki/Shell_script">shell scripting</a>, you&rsquo;d google for the shell / <a href="http://en.wikipedia.org/wiki/AWK">awk</a> syntax and waste hours writing scripts to do this. But then, wasting hours to run a simple script on multiple servers is pointless. What if I can do this with Python? All problems solved :) That is where <a href="http://docs.fabfile.org/en/1.7/">Fabric</a> comes into picture!</p>

<!-- more -->


<blockquote><p>Fabric is a Python library and command-line tool for streamlining the use of SSH for application deployment or systems administration tasks.</p></blockquote>

<p>Installing fabric is easy. Just run the following commands to install fabric via <a href="https://pypi.python.org/pypi/pip">pip</a>.</p>

<p><code>bash
apt-get install gcc python-dev python-setuptools
pip install fabric
</code></p>

<p>This enables the <em>fab</em> command which will be used to run fabric scripts. Fabric script file is named <code>fabfile.py</code> by convention. So, let us create a small script to check how many users logged into each server.</p>

<p>```python</p>

<h1>filename: fabfile.py</h1>

<p>from fabric.api import env, run</p>

<p>env.hosts = [&lsquo;192.168.0.9&rsquo;, &lsquo;192.168.0.10&rsquo;, &lsquo;192.168.0.11&rsquo;]</p>

<p>def logged_in_users():
    run(&lsquo;who&rsquo;)
```</p>

<p>Now, when we run this function using fabric, an ssh connection is made into each of the servers listed and the function is run. We can run this using the following command,</p>

<p><code>bash
fab logged_in_users
</code></p>

<p>Note that due to the naming convention we followed, we need not even give the filename to the fab command. It will automatically look for the file named <code>fabfile.py</code>    and runs the function you have specified.</p>

<p>Here is what you get as output, the logged in users of each system,</p>

<pre><code>[192.168.0.9] Executing task 'logged_in_users'
[192.168.0.9] run: who
[192.168.0.9] out: sandeep  tty7         2013-09-05 15:24 (:0)
[192.168.0.9] out: alex     pts/0        2013-09-05 22:38 (:0)
[192.168.0.9] out: root     pts/2        2013-09-06 03:31 (192.168.0.9)
[192.168.0.9] out: 

[192.168.0.10] Executing task 'logged_in_users'
[192.168.0.10] run: who
[192.168.0.10] out: sandeep  tty7         2013-09-05 15:22 (:0)
[192.168.0.10] out: 

[192.168.0.11] Executing task 'logged_in_users'
[192.168.0.11] run: who
[192.168.0.11] out: sandeep  tty7         2013-09-05 15:21 (:0)
[192.168.0.11] out: 


Done.
Disconnecting from 192.168.0.11... done.
Disconnecting from 192.168.0.10... done.
Disconnecting from 192.168.0.09... done.
</code></pre>

<p>If you just ran this command, you&rsquo;d realise that the process happens in a sequence. That is, the command is run on each server one after another. To run this command parallely on the listed server, pass the -P flag to the command. So, the same command runs the function in parallelly on each server,</p>

<p><code>bash
fab -P logged_in_users
</code></p>

<p>Now, with fabric, running scripts on multiple servers is simple and quick! :)</p>

<p><strong>SOURCE:</strong> This post is based on <a href="https://gist.github.com/DavidWittman/1886632">A Brief Introduction to Fabric</a> which I stumbled upon when I was looking for getting started with Fabric quickly. Check it out. Its pretty cool :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django Dumpdata To Dump Selective Rows]]></title>
    <link href="http://sandeepraju.in/blog/2013/08/22/django-dumpdata-to-dump-selective-rows/"/>
    <updated>2013-08-22T08:14:00+05:30</updated>
    <id>http://sandeepraju.in/blog/2013/08/22/django-dumpdata-to-dump-selective-rows</id>
    <content type="html"><![CDATA[<p>Thanks to my <a href="https://twitter.com/GurteshwarSingh">telephony geek friend</a> for letting me know this simple but highly useful method to selectively dump <a href="https://www.djangoproject.com">django</a> models data into a django standard <em>model-dump</em> format. Here is a simple snippet which shows how to selectively dump only the required rows and not the entire model.</p>

<!-- more -->


<p>```python
from django.core import serializers</p>

<h1>Generate a queryset depending on whatever you need</h1>

<p>query_set = YourModel.objects.all()[:2000]  # selecting only first 2k rows</p>

<h1>Serialize the queryset into JSON with indentation of 4 spaces</h1>

<p>json_data = serializers.serialize(&ldquo;json&rdquo;, query_set, indent=4)</p>

<h1>Dump the json data into a file</h1>

<p>output_file = open(&lsquo;YourModel.json&rsquo;, &lsquo;w&rsquo;)
output_file.write(json_data)
output_file.close()</p>

<p>```</p>

<p>Works like a charm!</p>

<p>Happy coding :)</p>
]]></content>
  </entry>
  
</feed>
